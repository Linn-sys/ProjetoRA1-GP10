const statusText = document.getElementById('status-text');
const statusEnvio = document.getElementById('status-envio');
// FunÃ§Ã£o para atualizar a interface (texto e cor)
function updateUI(status) {
    if (status === 'on') {
        statusText.textContent = 'Ligado';
        statusText.className = 'status-on';
    } else {
        statusText.textContent = 'Desligado';
        statusText.className = 'status-off';
    }
}

// Verifica o estado salvo no localStorage quando a pÃ¡gina Ã© carregada
document.addEventListener('DOMContentLoaded', () => {
    // Tenta obter o status salvo. Se nÃ£o existir, usa 'off' como padrÃ£o.
    const savedStatus = localStorage.getItem('processStatus') || 'off';
    updateUI(savedStatus);
});

// BotÃ£o iniciar
document.querySelector(".processo_start_button").addEventListener("click", async () => {
   console.log("Cliquei em iniciar"); // ðŸ‘ˆ testando
   try {
    const res = await fetch("http://localhost:3000/start-sockets");
    const dados = await res.json();
    console.log(dados.status);
    
    // ObtÃ©m o status atual do localStorage antes de fazer qualquer coisa
    const currentStatus = localStorage.getItem('processStatus');

    // **Verifica se o processo estÃ¡ desligado antes de iniciar a transiÃ§Ã£o**
    if (currentStatus === 'off' || !currentStatus) { // A segunda condiÃ§Ã£o Ã© para a primeira vez que a pÃ¡gina carrega
        // Muda o texto para 'Iniciando...' imediatamente
        statusText.textContent = 'Iniciando...';
        statusText.className = 'status-iniciando';
    }
    
    // Define o status como 'on'
    const newStatus = 'on';

    // Salva o novo status no localStorage
    // Usa setTimeout para atrasar a atualizaÃ§Ã£o da interface
    setTimeout(() => {
        // Salva o novo status no localStorage
        localStorage.setItem('processStatus', newStatus);
        statusEnvio.textContent = dados.status;
        // Atualiza a interface com o novo status
        updateUI(newStatus);
    }, 1800); // 1500 milissegundos = 1.5 segundos

  } catch (err) {
    statusEnvio.textContent = "Erro ao iniciar processos.";
    console.error("Erro ao iniciar processos:", err);
  }
});

// BotÃ£o finalizar
document.querySelector(".processo_stop_button").addEventListener("click", async () => {
  try {
    const res = await fetch("http://localhost:3000/stop-sockets");
    const dados = await res.json();
    console.log(dados.status);
    statusEnvio.textContent = dados.status;
    // Define o status como 'off'
    const newStatus = 'off';
    // Salva o novo status no localStorage
    localStorage.setItem('processStatus', newStatus);
    // Atualiza a interface
    updateUI(newStatus);

  } catch (err) {
    statusEnvio.textContent = "Erro ao finalizar processos.";
    console.error("Erro ao finalizar processos:", err);
  }
});

// BotÃ£o de Enviar Mensagem
document.querySelector(".enviar_msg_button").addEventListener("click", async () => {
Â  const inputElement = document.querySelector(".input");
Â  const mensagem = inputElement.value;

  if (mensagem.trim() === "") {
Â  Â   statusEnvio.textContent = 'A mensagem nÃ£o pode ser vazia.';
Â  Â   return; // NÃ£o envia mensagem vazia
  }
Â  try {
Â  Â  const res = await fetch("http://localhost:3000/enviar-mensagem", {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: {
Â  Â  Â  Â  "Content-Type": "application/json",
Â  Â  Â  },
Â  Â  Â  body: JSON.stringify({ mensagem: mensagem }),
Â  Â  });
Â  Â  const dados = await res.json();
Â  Â  console.log(dados.status);
Â  Â  inputElement.value = ""; // Limpa o input apÃ³s o envio
    statusEnvio.textContent = dados.status;
Â  } catch (err) {
    statusEnvio.textContent = "Erro ao enviar mensagem.";
Â  Â  console.error("Erro ao enviar mensagem:", err);
Â  }
});

// BotÃ£o de Limpar Log
document.querySelector(".limpar_log_button").addEventListener("click", async () => {
Â  Â  const proc1 = document.querySelector(".section-process_1_content");
Â  Â  const proc2 = document.querySelector(".section-process_2_content");
Â  Â  
Â  Â  // Apaga o conteÃºdo visualmente
Â  Â  while (proc1.children.length > 1) {
Â  Â  Â  Â  proc1.removeChild(proc1.lastChild);
Â  Â  }
Â  Â  while (proc2.children.length > 1) {
Â  Â  Â  Â  proc2.removeChild(proc2.lastChild);
Â  Â  }
Â  Â  
Â  Â  try {
Â  Â  Â  Â  // Envia uma requisiÃ§Ã£o ao servidor para limpar a memÃ³ria
Â  Â  Â  Â  const res = await fetch("http://localhost:3000/limpar-mensagens", {
Â  Â  Â  Â  Â  Â  method: "POST"
Â  Â  Â  Â  });
Â  Â  Â  Â  const dados = await res.json();
Â  Â  Â  Â  console.log(dados.status);
        ultimaQuantidade = 0; // CORREÃ‡ÃƒO: Reseta o contador
        statusEnvio.textContent = dados.status;
Â  Â  } catch (err) {
        statusEnvio.textContent = "Erro ao limpar mensagens do servidor.";
Â  Â  Â  Â  console.error("Erro ao limpar mensagens no servidor:", err);
Â  Â  }
});

let ultimaQuantidade = 0;

async function carregarMensagens() {
  try {
    const res = await fetch("http://localhost:3000/mensagens");
    const dados = await res.json(); // agora Ã© array

    if (Array.isArray(dados) && dados.length > ultimaQuantidade) {
      const novos = dados.slice(ultimaQuantidade); // pega sÃ³ o que Ã© novo
      ultimaQuantidade = dados.length;

      novos.forEach(msg => {
        const proc1 = document.querySelector(".section-process_1_content");
        const proc2 = document.querySelector(".section-process_2_content");
        const span = document.createElement("span");
        span.classList.add("text", "subtitle");

        if (msg.processo === 1) {
          span.innerText = "Cliente: " + msg.mensagem;
          proc1.appendChild(span);
          proc1.scrollTop = proc1.scrollHeight;
        } else if (msg.processo === 2) {
          span.innerText = "Servidor: " + msg.mensagem;
          proc2.appendChild(span);
          proc2.scrollTop = proc2.scrollHeight;
        }
      });
    }
  } catch (err) {
    statusEnvio.textContent = "Erro ao carregar mensagens";
    console.error("Erro ao carregar mensagens:", err);
  }
}

// Atualiza a cada 1.5s
setInterval(carregarMensagens, 1500);
carregarMensagens();

